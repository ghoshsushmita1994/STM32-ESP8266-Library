// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#pragma once

#include <stm32f2xx_hal.h>
#include <memory>
#include <list>
#include <FreeRTOS.h>
#include <timers.h>

#include "ERROR_TYPE.h"

#include "STM32Serial.h"
#include "WiFiDevice.h"

#define DEFAULT_ACCESSPOINT "Xeon"
#define DEFAULT_PASSPHRASE "Himanshu"

class IPAddress;
class WiFiDevice;

namespace EPRI
{
	class STM32TCP
    {
        friend class STM32TCPSocket;

    public:
        STM32TCP();
        virtual ~STM32TCP();

        typedef struct _Options
		{
			enum SocketMode : uint8_t
			{
				MODE_SERVER,
				MODE_CLIENT
			}                   m_Mode = MODE_SERVER;
			enum IPVersion : uint8_t
			{
				VERSION4 = 4,
				VERSION6 = 6
			}                   m_IPVersion = VERSION4;
			enum Protocol : uint8_t
			{
				TCP,
				UDP
			}                   m_Protocol = TCP;
			bool                m_ReuseAddress = true;

			_Options(SocketMode Mode = MODE_SERVER,
				IPVersion Version = VERSION4,
				Protocol Prot = TCP,
				bool ReuseAddress = true) :
				m_Mode(Mode),
				m_IPVersion(Version),
				m_Protocol(Prot),
				m_ReuseAddress(ReuseAddress)
			{
			}

		} Options;
    };

    class STM32TCPSocket : public STM32SerialSocket
    {

    public:
        STM32TCPSocket() = delete;
        STM32TCPSocket(const STM32Serial::Options& SerialOpt, const STM32TCP::Options& IPOpt, WiFiDevice* wifi);
        virtual ~STM32TCPSocket();
        
        STM32Serial::Options GetSerialOptions();
        STM32TCP::Options GetIPOptions();
        //
        // STM32SerialSocket
        //
        virtual ERROR_TYPE Open(const char * DestinationAddress = nullptr, int Port = DEFAULT_WiFi_PORT,
        		const char * AccessPoint = DEFAULT_ACCESSPOINT, const char * PassPhrase = DEFAULT_PASSPHRASE);
//        virtual ConnectCallbackFunction RegisterConnectHandler(ConnectCallbackFunction Callback);
        virtual ERROR_TYPE Write(const char * Data, size_t Count = 0, bool Asynchronous = false);
        virtual ERROR_TYPE Write(const WiFiBuffer& Data, bool Asynchronous = false);
//        virtual WriteCallbackFunction RegisterWriteHandler(WriteCallbackFunction Callback);
//        virtual ERROR_TYPE Read(WiFiBuffer * pData,
//        	size_t ReadAtLeast = 0,
//        	uint32_t TimeOutInMS = 0,
//			size_t * pActualBytes = nullptr);
//        virtual bool AppendAsyncReadResult(WiFiBuffer * pData, size_t ReadAtLeast = 0);
//        virtual ReadCallbackFunction RegisterReadHandler(ReadCallbackFunction Callback);
        virtual ERROR_TYPE Close();
//        virtual CloseCallbackFunction RegisterCloseHandler(CloseCallbackFunction Callback);
        virtual bool IsConnected();
        virtual void Connected();	// Himanshu
        virtual void Disconnect();	// Himanshu
        virtual ERROR_TYPE Accept(const char * DestinationAddress = nullptr, int Port = DEFAULT_WiFi_PORT);    // Himanshu
        virtual void RegisterDevice(WiFiDevice * wifi);		// Himanshu
        //
        // STM32SerialSocket
        //
        virtual ERROR_TYPE Flush(FlushDirection Direction);
        virtual ERROR_TYPE SetOptions(const STM32Serial::Options& SerialOpt, const STM32TCP::Options& IPOpt);
        
        struct Connection {
			std::string AccessPoint, PassPhrase;
			IPAddress TCPAddress;
			int TCPPort;
			Connection(const char* AccessPoint, const char* PassPhrase,
				const char * Address, int Port)
				: AccessPoint(AccessPoint)
				, PassPhrase(PassPhrase)
				, TCPAddress(Address)
				, TCPPort(Port)
			{}
		};

    private:
        void SetPortOptions();

        WiFiDevice *					m_WiFi;
        STM32TCP::Options				m_IPOptions;
//		ConnectCallbackFunction         m_Connect;
//		WriteCallbackFunction           m_Write;
//		ReadCallbackFunction            m_Read;
//		CloseCallbackFunction           m_Close;
//		bool							m_Connected = false;
        
        using SavedConnectionsList = std::list<Connection>;
		SavedConnectionsList 			m_Connections;
    };

}
